// Code generated by goyacc -o promql/parser/generated_parser.y.go promql/parser/generated_parser.y. DO NOT EDIT.

//line promql/parser/generated_parser.y:15
package parser

import __yyfmt__ "fmt"

//line promql/parser/generated_parser.y:15

import (
	"math"
	"strconv"
	"time"

	"github.com/prometheus/prometheus/model/exemplar"
	"github.com/prometheus/prometheus/model/labels"
	"github.com/prometheus/prometheus/model/value"
)

//line promql/parser/generated_parser.y:29
type yySymType struct {
	yys      int
	node     Node
	item     Item
	matchers []*labels.Matcher
	matcher  *labels.Matcher
	label    labels.Label
	labels   labels.Labels
	lblList  []labels.Label
	strings  []string
	series   []SequenceValue
	uint     uint64
	float    float64
	duration time.Duration
}

const EQL = 57346
const BLANK = 57347
const COLON = 57348
const COMMA = 57349
const COMMENT = 57350
const DURATION = 57351
const EOF = 57352
const ERROR = 57353
const IDENTIFIER = 57354
const LEFT_BRACE = 57355
const LEFT_BRACKET = 57356
const LEFT_PAREN = 57357
const METRIC_IDENTIFIER = 57358
const NUMBER = 57359
const RIGHT_BRACE = 57360
const RIGHT_BRACKET = 57361
const RIGHT_PAREN = 57362
const SEMICOLON = 57363
const SPACE = 57364
const STRING = 57365
const TIMES = 57366
const operatorsStart = 57367
const ADD = 57368
const DIV = 57369
const EQLC = 57370
const EQL_REGEX = 57371
const GTE = 57372
const GTR = 57373
const LAND = 57374
const LOR = 57375
const LSS = 57376
const LTE = 57377
const LUNLESS = 57378
const MOD = 57379
const MUL = 57380
const NEQ = 57381
const NEQ_REGEX = 57382
const POW = 57383
const SUB = 57384
const AT = 57385
const ATAN2 = 57386
const operatorsEnd = 57387
const aggregatorsStart = 57388
const AVG = 57389
const BOTTOMK = 57390
const COUNT = 57391
const COUNT_VALUES = 57392
const GROUP = 57393
const MAX = 57394
const MIN = 57395
const QUANTILE = 57396
const STDDEV = 57397
const STDVAR = 57398
const SUM = 57399
const TOPK = 57400
const aggregatorsEnd = 57401
const keywordsStart = 57402
const BOOL = 57403
const BY = 57404
const GROUP_LEFT = 57405
const GROUP_RIGHT = 57406
const IGNORING = 57407
const OFFSET = 57408
const ON = 57409
const WITHOUT = 57410
const keywordsEnd = 57411
const preprocessorStart = 57412
const START = 57413
const END = 57414
const preprocessorEnd = 57415
const startSymbolsStart = 57416
const START_METRIC = 57417
const START_SERIES_DESCRIPTION = 57418
const START_EXPRESSION = 57419
const START_METRIC_SELECTOR = 57420
const START_EXEMPLARS_DESCRIPTION = 57421
const startSymbolsEnd = 57422

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"EQL",
	"BLANK",
	"COLON",
	"COMMA",
	"COMMENT",
	"DURATION",
	"EOF",
	"ERROR",
	"IDENTIFIER",
	"LEFT_BRACE",
	"LEFT_BRACKET",
	"LEFT_PAREN",
	"METRIC_IDENTIFIER",
	"NUMBER",
	"RIGHT_BRACE",
	"RIGHT_BRACKET",
	"RIGHT_PAREN",
	"SEMICOLON",
	"SPACE",
	"STRING",
	"TIMES",
	"operatorsStart",
	"ADD",
	"DIV",
	"EQLC",
	"EQL_REGEX",
	"GTE",
	"GTR",
	"LAND",
	"LOR",
	"LSS",
	"LTE",
	"LUNLESS",
	"MOD",
	"MUL",
	"NEQ",
	"NEQ_REGEX",
	"POW",
	"SUB",
	"AT",
	"ATAN2",
	"operatorsEnd",
	"aggregatorsStart",
	"AVG",
	"BOTTOMK",
	"COUNT",
	"COUNT_VALUES",
	"GROUP",
	"MAX",
	"MIN",
	"QUANTILE",
	"STDDEV",
	"STDVAR",
	"SUM",
	"TOPK",
	"aggregatorsEnd",
	"keywordsStart",
	"BOOL",
	"BY",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"IGNORING",
	"OFFSET",
	"ON",
	"WITHOUT",
	"keywordsEnd",
	"preprocessorStart",
	"START",
	"END",
	"preprocessorEnd",
	"startSymbolsStart",
	"START_METRIC",
	"START_SERIES_DESCRIPTION",
	"START_EXPRESSION",
	"START_METRIC_SELECTOR",
	"START_EXEMPLARS_DESCRIPTION",
	"startSymbolsEnd",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line promql/parser/generated_parser.y:760

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 36,
	1, 132,
	10, 132,
	22, 132,
	-2, 0,
	-1, 59,
	2, 145,
	15, 145,
	62, 145,
	68, 145,
	-2, 98,
	-1, 60,
	2, 146,
	15, 146,
	62, 146,
	68, 146,
	-2, 99,
	-1, 61,
	2, 147,
	15, 147,
	62, 147,
	68, 147,
	-2, 101,
	-1, 62,
	2, 148,
	15, 148,
	62, 148,
	68, 148,
	-2, 102,
	-1, 63,
	2, 149,
	15, 149,
	62, 149,
	68, 149,
	-2, 103,
	-1, 64,
	2, 150,
	15, 150,
	62, 150,
	68, 150,
	-2, 108,
	-1, 65,
	2, 151,
	15, 151,
	62, 151,
	68, 151,
	-2, 110,
	-1, 66,
	2, 152,
	15, 152,
	62, 152,
	68, 152,
	-2, 112,
	-1, 67,
	2, 153,
	15, 153,
	62, 153,
	68, 153,
	-2, 113,
	-1, 68,
	2, 154,
	15, 154,
	62, 154,
	68, 154,
	-2, 114,
	-1, 69,
	2, 155,
	15, 155,
	62, 155,
	68, 155,
	-2, 115,
	-1, 70,
	2, 156,
	15, 156,
	62, 156,
	68, 156,
	-2, 116,
	-1, 195,
	12, 201,
	13, 201,
	16, 201,
	17, 201,
	23, 201,
	26, 201,
	32, 201,
	33, 201,
	36, 201,
	42, 201,
	47, 201,
	48, 201,
	49, 201,
	50, 201,
	51, 201,
	52, 201,
	53, 201,
	54, 201,
	55, 201,
	56, 201,
	57, 201,
	58, 201,
	62, 201,
	66, 201,
	68, 201,
	71, 201,
	72, 201,
	-2, 0,
	-1, 196,
	12, 201,
	13, 201,
	16, 201,
	17, 201,
	23, 201,
	26, 201,
	32, 201,
	33, 201,
	36, 201,
	42, 201,
	47, 201,
	48, 201,
	49, 201,
	50, 201,
	51, 201,
	52, 201,
	53, 201,
	54, 201,
	55, 201,
	56, 201,
	57, 201,
	58, 201,
	62, 201,
	66, 201,
	68, 201,
	71, 201,
	72, 201,
	-2, 0,
	-1, 217,
	19, 199,
	-2, 0,
	-1, 267,
	19, 200,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 689

var yyAct = [...]int16{
	273, 38, 221, 146, 263, 262, 116, 183, 80, 107,
	105, 184, 104, 57, 9, 108, 10, 10, 36, 223,
	10, 76, 181, 7, 276, 103, 106, 130, 193, 233,
	194, 195, 196, 239, 257, 58, 152, 279, 256, 109,
	125, 277, 252, 265, 258, 274, 158, 157, 213, 235,
	236, 157, 99, 237, 102, 251, 111, 109, 112, 255,
	158, 250, 159, 110, 224, 226, 228, 229, 230, 238,
	240, 243, 244, 245, 246, 247, 159, 101, 225, 227,
	231, 232, 234, 241, 242, 118, 107, 188, 248, 249,
	10, 119, 108, 113, 126, 117, 2, 3, 4, 5,
	6, 253, 73, 34, 271, 155, 156, 160, 187, 270,
	153, 170, 164, 167, 154, 162, 148, 268, 163, 166,
	11, 8, 269, 149, 149, 149, 278, 176, 192, 177,
	186, 77, 165, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 207, 208, 209, 210, 211, 191, 103,
	124, 212, 123, 218, 179, 174, 147, 217, 82, 118,
	173, 85, 87, 84, 178, 180, 214, 215, 81, 117,
	216, 172, 96, 97, 185, 115, 99, 100, 102, 86,
	254, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 141, 142, 143, 144, 145, 103, 161, 260, 261,
	182, 101, 264, 259, 149, 157, 49, 75, 122, 87,
	35, 1, 74, 121, 158, 190, 266, 48, 82, 96,
	97, 267, 182, 99, 120, 102, 86, 157, 81, 47,
	159, 46, 45, 223, 79, 129, 158, 44, 43, 42,
	127, 168, 41, 233, 128, 40, 39, 239, 101, 50,
	150, 220, 159, 83, 272, 189, 219, 78, 151, 275,
	56, 222, 175, 235, 236, 51, 114, 237, 0, 0,
	0, 0, 0, 280, 0, 250, 0, 281, 224, 226,
	228, 229, 230, 238, 240, 243, 244, 245, 246, 247,
	0, 0, 225, 227, 231, 232, 234, 241, 242, 0,
	0, 0, 248, 249, 52, 73, 0, 54, 23, 53,
	0, 0, 169, 0, 0, 55, 0, 0, 71, 0,
	0, 0, 0, 0, 19, 20, 0, 0, 21, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 0, 0, 0, 14, 0, 0, 0, 25, 0,
	31, 0, 0, 32, 33, 37, 0, 52, 73, 0,
	54, 23, 53, 0, 0, 0, 0, 0, 55, 0,
	0, 71, 0, 0, 0, 0, 0, 19, 20, 0,
	0, 21, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 0, 0, 0, 14, 0, 0,
	0, 25, 0, 31, 0, 0, 32, 33, 52, 73,
	0, 54, 23, 53, 0, 0, 0, 0, 0, 55,
	0, 0, 71, 0, 0, 0, 0, 0, 19, 20,
	0, 0, 21, 0, 0, 18, 34, 0, 72, 23,
	0, 0, 0, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 19, 20, 0, 14, 21,
	0, 0, 25, 0, 31, 0, 0, 32, 33, 0,
	12, 13, 15, 16, 17, 22, 24, 26, 27, 28,
	29, 30, 18, 73, 0, 14, 23, 0, 0, 25,
	0, 31, 0, 0, 32, 33, 0, 0, 0, 0,
	0, 0, 19, 20, 0, 0, 21, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 12, 13, 15,
	16, 17, 22, 24, 26, 27, 28, 29, 30, 0,
	0, 103, 14, 0, 0, 0, 25, 171, 31, 0,
	0, 32, 33, 85, 87, 88, 0, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 103, 99, 100,
	102, 86, 0, 0, 0, 0, 0, 0, 0, 85,
	87, 88, 0, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 101, 99, 100, 102, 86, 0, 0,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 87, 88, 0, 89, 90, 91, 101,
	93, 94, 95, 96, 97, 98, 103, 99, 100, 102,
	86, 0, 0, 0, 0, 0, 0, 0, 85, 87,
	88, 0, 89, 90, 0, 0, 93, 94, 0, 96,
	97, 98, 101, 99, 100, 102, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101,
}

var yyPact = [...]int16{
	21, 111, 443, 443, 355, 490, 443, -1000, -1000, -1000,
	90, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 216, -1000, 161, -1000, 563, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 24, 42, -1000, 416, -1000, 416, 89, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 157, -1000, -1000, 443, -1000, 206, -1000,
	-1000, 148, -1000, 18, -1000, -34, -34, -34, -34, -34,
	-34, -34, -34, -34, -34, -34, -34, -34, -34, -34,
	-34, 114, 34, 195, 42, -53, -1000, 117, 117, 292,
	-1000, 537, 11, -1000, 153, -1000, -1000, 125, -1000, 188,
	-1000, 156, -1000, 85, -1000, 210, 416, -1000, -37, -32,
	-1000, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, -1000, 116, -1000, -1000,
	-1000, 33, -1000, -1000, -1000, -1000, -1000, -1000, 30, 30,
	151, -1000, -1000, -1000, -1000, 231, -1000, -1000, 35, -1000,
	563, -1000, -1000, 83, -1000, 36, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10, 20, 182, 117, 117, 117, 117, 11, 11, 135,
	135, 135, 622, 596, 135, 135, 622, 11, 11, 135,
	11, 182, -1000, 23, -1000, -1000, -1000, 115, -1000, 102,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 416, -1000, -1000, -1000, -1000, 28, 28, 0,
	-1000, -1000, -1000, -1000, -1000, -1000, 22, 124, -1000, -1000,
	17, -1000, 563, -1000, -1000, -1000, 28, -1000, -1000, -1000,
	-1000, -1000,
}

var yyPgo = [...]int16{
	0, 266, 6, 265, 2, 262, 261, 13, 260, 258,
	120, 14, 257, 8, 256, 4, 5, 255, 253, 0,
	7, 22, 11, 250, 249, 246, 12, 94, 245, 244,
	1, 242, 241, 10, 240, 35, 239, 238, 237, 235,
	232, 231, 229, 217, 206, 3, 216, 211, 210, 207,
}

var yyR1 = [...]int8{
	0, 47, 47, 47, 47, 47, 47, 47, 47, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 25, 25, 25, 25, 26, 26, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 27, 29, 29, 39, 39, 34, 34,
	34, 34, 15, 15, 15, 15, 14, 14, 14, 4,
	4, 31, 33, 33, 32, 32, 32, 40, 38, 38,
	38, 24, 24, 24, 9, 9, 36, 42, 42, 42,
	42, 42, 43, 44, 44, 44, 35, 35, 35, 1,
	1, 1, 2, 2, 2, 2, 11, 11, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	10, 10, 10, 10, 12, 12, 12, 13, 13, 13,
	13, 48, 18, 18, 18, 18, 17, 17, 17, 17,
	17, 21, 21, 21, 49, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 8, 8, 5, 5, 5, 5,
	37, 20, 22, 22, 23, 23, 19, 45, 41, 46,
	46, 16, 16,
}

var yyR2 = [...]int8{
	0, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 2, 2, 2, 2, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 1, 0, 1, 3, 3, 1, 1,
	3, 3, 3, 4, 2, 1, 3, 1, 2, 1,
	1, 2, 3, 2, 3, 1, 2, 3, 3, 4,
	3, 3, 5, 3, 1, 1, 4, 6, 6, 5,
	4, 3, 2, 2, 1, 1, 3, 4, 2, 3,
	1, 2, 3, 3, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 4, 2, 0, 3, 1, 2, 3, 3, 2,
	1, 2, 0, 3, 2, 1, 1, 3, 1, 3,
	4, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 0,
	1, 0, 1,
}

var yyChk = [...]int16{
	-1000, -47, 75, 76, 77, 78, 79, 2, 10, -11,
	-7, -10, 47, 48, 62, 49, 50, 51, 12, 32,
	33, 36, 52, 16, 53, 66, 54, 55, 56, 57,
	58, 68, 71, 72, 13, -48, -11, 10, -30, -25,
	-28, -31, -36, -37, -38, -40, -41, -42, -43, -44,
	-24, -3, 12, 17, 15, 23, -8, -7, -35, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 26, 42, 13, -44, -49, -11, -10, -12, 18,
	-13, 12, 2, -18, 2, 26, 44, 27, 28, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 41,
	42, 66, 43, 14, -26, -33, 2, 62, 68, 15,
	-33, -30, -30, -35, -1, 18, -2, 12, 2, -11,
	18, 7, 2, 4, 2, 22, -27, -34, -29, -39,
	61, -27, -27, -27, -27, -27, -27, -27, -27, -27,
	-27, -27, -27, -27, -27, -27, -45, 42, 2, 9,
	-23, -9, 2, -20, -22, 71, 72, 17, 26, 42,
	-45, 2, -33, -26, -15, 15, 2, -15, -32, 20,
	-30, 20, 18, 7, 2, -5, 2, 4, 39, 29,
	40, -21, 12, -20, -22, 18, -13, 23, 2, -17,
	5, -21, -30, 65, 67, 63, 64, -30, -30, -30,
	-30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
	-30, -30, -45, 15, -20, -20, 19, 6, 2, -14,
	20, -4, -6, 2, 47, 61, 48, 62, 49, 50,
	51, 63, 64, 12, 65, 32, 33, 36, 52, 16,
	53, 66, 67, 54, 55, 56, 57, 58, 71, 72,
	44, 20, 7, 18, -2, 23, 2, 24, 24, -22,
	-15, -15, -16, -15, -16, 20, -46, -45, 2, 20,
	7, 2, -30, -19, 17, -19, 24, 19, 2, 20,
	-4, -19,
}

var yyDef = [...]int16{
	0, -2, 123, 123, 0, 0, 123, 8, 7, 1,
	123, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 0, 2, -2, 3, 4, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 104, 190, 0, 198, 0, 84, 85, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 184, 185, 0, 5, 6, 123, 96, 0, 122,
	125, 0, 130, 131, 135, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 0, 0, 0, 0, 23, 24, 0, 0, 0,
	61, 0, 82, 83, 0, 88, 90, 0, 95, 0,
	120, 0, 126, 0, 129, 134, 0, 43, 48, 49,
	45, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 70, 197,
	71, 0, 73, 194, 195, 74, 75, 191, 0, 0,
	0, 81, 21, 22, 25, 0, 55, 26, 0, 63,
	65, 67, 86, 0, 91, 0, 94, 186, 187, 188,
	189, 144, 141, 142, 143, 121, 124, 127, 128, 133,
	136, 138, 27, 0, 0, -2, -2, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 69, 0, 192, 193, 76, -2, 80, 0,
	54, 57, 59, 60, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 62, 66, 87, 89, 92, 93, 0, 0, 0,
	46, 47, 50, 202, 51, 72, 0, -2, 79, 52,
	0, 58, 64, 137, 196, 139, 0, 77, 78, 53,
	56, 140,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:176
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].labels
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:179
		{
			yylex.(*parser).addParseErrf(PositionRange{}, "no expression found in input")
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:181
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:183
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:187
		{
			yylex.(*parser).unexpected("", "")
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:210
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].node)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:212
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[3].node, yyDollar[2].node)
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:214
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, yyDollar[2].node)
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:216
		{
			yylex.(*parser).unexpected("aggregation", "")
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, Expressions{})
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:224
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
			}
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:230
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
				Without:  true,
			}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:243
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:244
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:245
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:246
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:247
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:248
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:249
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:250
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:251
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:252
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:253
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:254
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:255
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:256
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:257
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:258
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:266
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
			}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:271
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
				ReturnBool:     true,
			}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:279
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:284
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
			yyVAL.node.(*BinaryExpr).VectorMatching.On = true
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:294
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardManyToOne
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:300
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardOneToMany
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:309
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:311
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:313
		{
			yyVAL.strings = []string{}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:315
		{
			yylex.(*parser).unexpected("grouping opts", "\"(\"")
			yyVAL.strings = nil
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:321
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[3].item.Val)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:323
		{
			yyVAL.strings = []string{yyDollar[1].item.Val}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:325
		{
			yylex.(*parser).unexpected("grouping opts", "\",\" or \")\"")
			yyVAL.strings = yyDollar[1].strings
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:329
		{
			if !isLabel(yyDollar[1].item.Val) {
				yylex.(*parser).unexpected("grouping opts", "label")
			}
			yyVAL.item = yyDollar[1].item
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:336
		{
			yylex.(*parser).unexpected("grouping opts", "label")
			yyVAL.item = Item{}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:344
		{
			fn, exist := getFunction(yyDollar[1].item.Val, yylex.(*parser).functions)
			if !exist {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "unknown function with name %q", yyDollar[1].item.Val)
			}
			yyVAL.node = &Call{
				Func: fn,
				Args: yyDollar[2].node.(Expressions),
				PosRange: PositionRange{
					Start: yyDollar[1].item.Pos,
					End:   yylex.(*parser).lastClosing,
				},
			}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:361
		{
			yyVAL.node = yyDollar[2].node
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:363
		{
			yyVAL.node = Expressions{}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:367
		{
			yyVAL.node = append(yyDollar[1].node.(Expressions), yyDollar[3].node.(Expr))
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:369
		{
			yyVAL.node = Expressions{yyDollar[1].node.(Expr)}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:371
		{
			yylex.(*parser).addParseErrf(yyDollar[2].item.PositionRange(), "trailing commas not allowed in function call args")
			yyVAL.node = yyDollar[1].node
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:382
		{
			yyVAL.node = &ParenExpr{Expr: yyDollar[2].node.(Expr), PosRange: mergeRanges(&yyDollar[1].item, &yyDollar[3].item)}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:390
		{
			yylex.(*parser).addOffset(yyDollar[1].node, yyDollar[3].duration)
			yyVAL.node = yyDollar[1].node
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:395
		{
			yylex.(*parser).addOffset(yyDollar[1].node, -yyDollar[4].duration)
			yyVAL.node = yyDollar[1].node
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:400
		{
			yylex.(*parser).unexpected("offset", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:407
		{
			yylex.(*parser).setTimestamp(yyDollar[1].node, yyDollar[3].float)
			yyVAL.node = yyDollar[1].node
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line promql/parser/generated_parser.y:412
		{
			yylex.(*parser).setAtModifierPreprocessor(yyDollar[1].node, yyDollar[3].item)
			yyVAL.node = yyDollar[1].node
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:417
		{
			yylex.(*parser).unexpected("@", "timestamp")
			yyVAL.node = yyDollar[1].node
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:427
		{
			var errMsg string
			vs, ok := yyDollar[1].node.(*VectorSelector)
			if !ok {
				errMsg = "ranges only allowed for vector selectors"
			} else if vs.OriginalOffset != 0 {
				errMsg = "no offset modifiers allowed before range"
			} else if vs.Timestamp != nil {
				errMsg = "no @ modifiers allowed before range"
			}

			if errMsg != "" {
				errRange := mergeRanges(&yyDollar[2].item, &yyDollar[4].item)
				yylex.(*parser).addParseErrf(errRange, errMsg)
			}

			yyVAL.node = &MatrixSelector{
				VectorSelector: yyDollar[1].node.(Expr),
				Range:          yyDollar[3].duration,
				EndPos:         yylex.(*parser).lastClosing,
			}
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
//line promql/parser/generated_parser.y:452
		{
			yyVAL.node = &SubqueryExpr{
				Expr:  yyDollar[1].node.(Expr),
				Range: yyDollar[3].duration,
				Step:  yyDollar[5].duration,

				EndPos: yyDollar[6].item.Pos + 1,
			}
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line promql/parser/generated_parser.y:462
		{
			yylex.(*parser).unexpected("subquery selector", "\"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line promql/parser/generated_parser.y:464
		{
			yylex.(*parser).unexpected("subquery selector", "duration or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:466
		{
			yylex.(*parser).unexpected("subquery or range", "\":\" or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:468
		{
			yylex.(*parser).unexpected("subquery selector", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:478
		{
			if nl, ok := yyDollar[2].node.(*NumberLiteral); ok {
				if yyDollar[1].item.Typ == SUB {
					nl.Val *= -1
				}
				nl.PosRange.Start = yyDollar[1].item.Pos
				yyVAL.node = nl
			} else {
				yyVAL.node = &UnaryExpr{Op: yyDollar[1].item.Typ, Expr: yyDollar[2].node.(Expr), StartPos: yyDollar[1].item.Pos}
			}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:496
		{
			vs := yyDollar[2].node.(*VectorSelector)
			vs.PosRange = mergeRanges(&yyDollar[1].item, vs)
			vs.Name = yyDollar[1].item.Val
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:504
		{
			vs := &VectorSelector{
				Name:          yyDollar[1].item.Val,
				LabelMatchers: []*labels.Matcher{},
				PosRange:      yyDollar[1].item.PositionRange(),
			}
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:514
		{
			vs := yyDollar[1].node.(*VectorSelector)
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:522
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[3].item),
			}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:529
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[4].item),
			}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:536
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: []*labels.Matcher{},
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[2].item),
			}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:545
		{
			if yyDollar[1].matchers != nil {
				yyVAL.matchers = append(yyDollar[1].matchers, yyDollar[3].matcher)
			} else {
				yyVAL.matchers = yyDollar[1].matchers
			}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:553
		{
			yyVAL.matchers = []*labels.Matcher{yyDollar[1].matcher}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:555
		{
			yylex.(*parser).unexpected("label matching", "\",\" or \"}\"")
			yyVAL.matchers = yyDollar[1].matchers
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:559
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:561
		{
			yylex.(*parser).unexpected("label matching", "string")
			yyVAL.matcher = nil
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:563
		{
			yylex.(*parser).unexpected("label matching", "label matching operator")
			yyVAL.matcher = nil
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:565
		{
			yylex.(*parser).unexpected("label matching", "identifier or \"}\"")
			yyVAL.matcher = nil
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:573
		{
			b := labels.NewBuilder(yyDollar[2].labels)
			b.Set(labels.MetricName, yyDollar[1].item.Val)
			yyVAL.labels = b.Labels()
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:575
		{
			yyVAL.labels = yyDollar[1].labels
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:582
		{
			yyVAL.labels = labels.New(yyDollar[2].lblList...)
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:584
		{
			yyVAL.labels = labels.New(yyDollar[2].lblList...)
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:586
		{
			yyVAL.labels = labels.New()
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:588
		{
			yyVAL.labels = labels.New()
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:592
		{
			yyVAL.lblList = append(yyDollar[1].lblList, yyDollar[3].label)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:594
		{
			yyVAL.lblList = []labels.Label{yyDollar[1].label}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:596
		{
			yylex.(*parser).unexpected("label set", "\",\" or \"}\"")
			yyVAL.lblList = yyDollar[1].lblList
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:601
		{
			yyVAL.label = labels.Label{Name: yyDollar[1].item.Val, Value: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:603
		{
			yylex.(*parser).unexpected("label set", "string")
			yyVAL.label = labels.Label{}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:605
		{
			yylex.(*parser).unexpected("label set", "\"=\"")
			yyVAL.label = labels.Label{}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:607
		{
			yylex.(*parser).unexpected("label set", "identifier or \"}\"")
			yyVAL.label = labels.Label{}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:615
		{
			yylex.(*parser).generatedParserResult = &seriesDescription{
				labels: yyDollar[1].labels,
				values: yyDollar[2].series,
			}
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:624
		{
			yyVAL.series = []SequenceValue{}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:626
		{
			yyVAL.series = append(yyDollar[1].series, yyDollar[3].series...)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:628
		{
			yyVAL.series = yyDollar[1].series
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:630
		{
			yylex.(*parser).unexpected("series values", "")
			yyVAL.series = nil
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:634
		{
			yyVAL.series = []SequenceValue{{Omitted: true}}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:636
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i < yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Omitted: true})
			}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:643
		{
			yyVAL.series = []SequenceValue{{Value: yyDollar[1].float}}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:645
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i <= yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
			}
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:652
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i <= yyDollar[4].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
				yyDollar[1].float += yyDollar[2].float
			}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:662
		{
			if yyDollar[1].item.Val != "stale" {
				yylex.(*parser).unexpected("series values", "number or \"stale\"")
			}
			yyVAL.float = math.Float64frombits(value.StaleNaN)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:674
		{
			yylex.(*parser).generatedParserResult = &seriesDescription{
				labels:    yyDollar[1].labels,
				exemplars: []exemplar.Exemplar{{Labels: yyDollar[2].labels, Value: yyDollar[3].float}},
			}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:701
		{
			yyVAL.node = &NumberLiteral{
				Val:      yylex.(*parser).number(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:709
		{
			yyVAL.float = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:711
		{
			yyVAL.float = yyDollar[2].float
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:712
		{
			yyVAL.float = -yyDollar[2].float
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:718
		{
			var err error
			yyVAL.uint, err = strconv.ParseUint(yyDollar[1].item.Val, 10, 64)
			if err != nil {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid repetition in series values: %s", err)
			}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:728
		{
			var err error
			yyVAL.duration, err = parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[1].item.PositionRange(), err)
			}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:739
		{
			yyVAL.node = &StringLiteral{
				Val:      yylex.(*parser).unquoteString(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:752
		{
			yyVAL.duration = 0
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:756
		{
			yyVAL.strings = nil
		}
	}
	goto yystack /* stack new state and value */
}
